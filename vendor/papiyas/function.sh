#!/usr/bin/env bash

#####################################################
##
## 通用函数库
## @author papiyas
##
#####################################################


########################################################
## 判断函数是否已定义
## 当函数已定义则返回成功,否则失败
##
## @param function_name 函数名称
## @return 所传入的参数为函数则返回真, 否则返回假
## 
########################################################
function_exists() {
  if [[ $(type -t $1) == 'function' ]]; then
    return 0
  else
    return 1
  fi
}

########################################################
## 判断命令是否存在
## 当命令已定义则返回成功,否则失败
##
## @param command_name 命令名称
## @return 所传入的参数为已存在的命令时返回真, 否则返回假
## 
########################################################
command_exists() {
  if command -v $1 &> /dev/null; then
    return 0
  else
    return 1
  fi
}

########################################################
## 将所有小写字母转换为大写字母
##
## @param str 要转换的字符串
## @return 返回转换成大写的字符串
## 
########################################################
str_upper() {
  echo $1 | tr '[a-z]' '[A-Z]'
}


########################################################
## 将所有大写字母转换为小写字母
##
## @param str 要转换的字符串
## @return 返回转换成小写的字符串
## 
## @author papiyas
########################################################
str_lower() {
  echo $1 | tr '[A-Z]' '[a-z]'
}

########################################################
## 将特殊分割形式转化为驼峰式
##
## @param str 要转换的字符串
## @param delimiter 分隔符, 默认为短横线 -
##
## @return 返回转换成功的驼峰式字符串
##
########################################################
to_camel() {
  local arr=($(echo $1 | tr ${2:-'-'} ' '))
  local value
  local camel=''

  for value in ${arr[@]}; do
    camel+=$(str_upper ${value::1})${value:1}
  done
  
  echo $camel
}

########################################################
## 将所有特殊字符串前都加上转义'\'字符
## 主要用在sed替换时如果存在特殊字符无法替换的时候
##
## @param str 要转换的字符串
##
##
########################################################
function str_convert() {
  echo $1 | sed 's/[^a-zA-Z0-9_]/\\&/g'
}

########################################################
## 获取满足匹配条件的行数
##
##
## @param regex 查找字符串
## @param file  文件名
## @return 返回匹配行的行数, 如果匹配多行则会返回多条行数
##
########################################################
function get_line() {
  #local regex=$1
  #local file=$2
  #grep -n "${regex}" "${file}" | cut -d ':' -f 1
  sed -n "/${1}/=" "${2}"
}



